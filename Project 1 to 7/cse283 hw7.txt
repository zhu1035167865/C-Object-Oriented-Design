/*Xiongfeng Zhu
 cse 283 */

#include <iostream> //cin, cout

	using namespace std;


	 class node {
	 public:
		 int value;
		 node * next;
		 node() { next = nullptr; }
		 node(int i) { value = i; next = nullptr; }
	 };


	 class linked_list {
	 public:
		 int num_nodes;
		 node * head;
		 linked_list() { num_nodes = 0; head = nullptr; }
		 void make_linked_list(int k);
		 void print_linked_list();
		 void make_random_linked_list(int k, int m);
		 //create a linked list of k nodes, with random values between 0 and m-1
		 void reverse();
		 void remove_one(int k);//remove the first node with value k
								//***************************************************************************
								//HW2: implement sort and remove_all
		 void sort();
		 void remove_all(int k);//remove all nodes with value = k;
								//************************************************************************



	 };
	 void linked_list::remove_one(int k) {
		 if (head == nullptr) return;
		 if (head->value == k) {
			 node * p = head->next;
			 delete head;
			   
			 head = p;
			 num_nodes--;
			 return;
		 }
		 node * p1 = head, *p2 = p1->next;
		 while (p2 != nullptr) {
			 if (p2->value == k) {
				 p1->next = p2->next;
				 delete p2;
				 num_nodes--;
				 return;
			 }
			 p1 = p2;
			 p2 = p2->next;
		 }
	 }

	 void linked_list::make_linked_list(int k) {
		 for (int i = 0; i < k; i++) {
			 node * p1 = new node(i);
			 p1->next = head;
			 head = p1;
			 num_nodes++;
		 }
	 }


	 void linked_list::print_linked_list() {
		 cout << endl;
		 node * p1 = head;
		 while (p1 != nullptr) {
			 cout << p1->value << " ";
			 p1 = p1->next;
		 }
	 }

	 void linked_list::make_random_linked_list(int k, int m) {
		 //create a linked list of k nodes with values randomly in 0 ... m-1
		 for (int i = 0; i < k; i++) {
			 node * p1 = new node(rand() % m); //rand()%10 +2:  randomly in 2 ... 11
			 p1->next = head;
			 head = p1;
			 num_nodes++;
		 }
	 }

	 void linked_list::reverse() {
		 if (num_nodes <= 1) return;
		 node * p1 = head, *p2 = p1->next, *p3;
		 while (p2 != nullptr) {
			 p3 = p2->next;
			 p2->next = p1;
			 if (p1 == head) p1->next = nullptr;
			 p1 = p2;
			 p2 = p3;
		 }
		 head = p1;
	 }

		 void linked_list::sort()
		 {
			 if (num_nodes != 0)
			 {
				 node* current = head;
				 node* prev = 0;
				 node* tempNode = 0;
				 bool changeFlag = false;
				 double k = 100000000;
				 for (int i = 0; i < k; i++)
				 {
					 while (current->next != 0)
					 {
						 tempNode = current->next;

						 if (current->value > tempNode->value)
						 {
							 changeFlag = true;
							 swap(current->value, tempNode->value);
						 }
						 else
						 {
							 prev = current;
							 current = current->next;
						 }
					 }
					 if (changeFlag == false)
						 break;
					 else
					 {
						 prev = 0;
						 current = head;
						 changeFlag = false;
					 }
				 }
			 }
		 }



		 void linked_list::remove_all(int k) {
			 if (head == nullptr)
				 return;
			 if (head->value == k) {
				 node * p1 = head->next;
				 delete head;
				 head = p1;
				 num_nodes--;
				 return;
			 }
			 node * p1 = head, *p2 = p1->next;
			 while (p2 != nullptr) {
				 if (p2->value == k) {
					 if (p2 == head) {
						 head = p2->next;
						 p1 = head;
						 delete p2;
						 p2 = head;
					 }
					 else {
						 p1->next = p2->next;
						 delete p2;
						 p2 = p1->next;
					 }
				 }
				 else {
					 p1 = p2;
					 p2 = p2->next;
				 }
			 }
			 return;
		 }



	

	 int main() {
		 linked_list L1;
		 L1.make_linked_list(10);
		 L1.print_linked_list();
		 cout << L1.num_nodes;
		 L1.make_random_linked_list(20, 100);
		 L1.print_linked_list();
		 L1.reverse();
		 L1.print_linked_list();
		 L1.remove_one(41);
		 L1.print_linked_list();
		 L1.remove_one(0);
		 L1.print_linked_list();
		 L1.remove_one(36);
		 L1.print_linked_list();
		 L1.sort();
		 L1.print_linked_list();
		 L1.remove_all(5);
		 L1.print_linked_list();

		 

		 getchar();
		 getchar();

		 return 0;

	 }