#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <string>

using namespace std;

template <class T> class ThreeD {
public:
	T ht;
	T wid;
	T dep;
	ThreeD(T i, T j, T k) { ht = i; wid = j; dep = k; }
	ThreeD() { ht = wid = dep = (T)0; }
	ThreeD(T i) { ht = wid = dep = i; }
	template <class T> friend ostream & operator<<(ostream & stream, ThreeD<T> & t);
	template <class T> friend ostream & operator<<(ostream & stream, ThreeD<T> && t);
};

template <class T> ostream & operator<<(ostream & stream, ThreeD<T> & t) {
	stream << "( " << t.ht << ", " << t.wid << ", " << t.dep << " )";
	return stream;
}

template <class T> ostream & operator<<(ostream & stream, ThreeD<T> && t) {
	stream << "( " << t.ht << ", " << t.wid << ", " << t.dep << " )";
	return stream;
}

template <class T> istream & operator>>(istream & stream, ThreeD<T> &t) {
	stream >> t.ht >> t.wid >> t.dep;
	return stream;
}


template <class T> class node {
public:
	T value;
	node<T> * next;
	node() { next = nullptr; }
	node(T t) { value = t; next = nullptr; }
};

template <class T> class linked_list {
public:
	int num_nodes;
	node<T> * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void push_front(T t);
	template <class T>
	friend ostream & operator<<(ostream & stream, linked_list<T> &t);
	template <class T>
	friend istream & operator>>(istream & stream, linked_list<T> &t);
};

template <class T> void linked_list<T>::push_front(T t) {
	node<T> * p = new node<T>(t);
	p->next = head;
	head = p;
	num_nodes++;
}

template <class T> ostream & operator<<(ostream & stream, linked_list<T> &t) {
	node<T> * p = t.head;
	while (p != nullptr) {
		stream << p->value << " ";
		p = p->next;
	}
	return stream;
}

template <class T> istream & operator>>(istream & stream, linked_list<T> &t) {
	stream >> t.num_nodes;
	node<T> * p;
	T temp;
	for (int i = 0; i < t.num_nodes; i++) {
		stream >> temp;
		p = new node<T>(temp);
		p->next = t.head;
		t.head = p;
	}
	return stream;
}

template <class X> class item {
public:
	X value;
	item <X> * next;
	item <X> * previous;
	item <X>(X v) { value = v; next = nullptr; previous = nullptr; }
	bool operator==(item<X> I) { retrun(value == I.value); }
	template <class X> friend ostream & operator<<(ostream & stream, item<X> &t);
};

template<class X> ostream & operator<<(ostream & stream, item<X> &t) {
	stream << t.value << " ";
	return stream;
}

template <class X>
class bag {
public:
	item<X> *last;
	item<X> *first;
	int num_items;
	int size() { return num_items; }
	bag() { last = nullptr; first = nullptr; num_items = 0; }
	void push_back(X v);
	void push_front(X v);
	void pop_back();
	void pop_front();
	X &operator[](int i);
	X front();
	X back();
	void clear();
	template <class X> friend ostream & operator<<(ostream & stream, bag<X> &t);
	//add more code if needed
};

template<class X> void bag<X>::push_back(X v) {
	item<X> *n1 = new item<X>(v); //create a pointer that is pointing to a new item with value = v
	if (num_items == 0) { //if there's no item in the bag
		first = n1; //the new item is both the first one and the last one
		last = n1;
	}
	else { //if there's item in the bag already
		n1->previous = last; // add the new item at the end of the bag
		last->next = n1;
		last = n1; // the new item is the last item
	}
	num_items++;
	return;
}

template<class X> void bag<X>::push_front(X v) {
	item<X> *n1 = new item<X>(v);
	if (num_items == 0) {
		first = n1;
		last = n1;
	}
	else {
		n1->next = first;
		first->previous = n1;
		first = n1;
	}
	num_items++;
	return;
}

template<class X> void bag<X>::pop_back() {
	if (num_items == 0) { return; } //if there's no item, simply end

	if (num_items == 1) {  //if there's only one item, delete it, reset the bag
		delete last;
		first = nullptr;
		last = nullptr;
	}
	else {         //if there are more than one item
		last = last->previous; //let last be the one in front of it
		delete last->next; //delete the next item, which was the last item in the bag
		last->next = nullptr; //let the last item pointing to nullptr
	}
	num_items--;
	return;
}

template<class X> void bag<X>::pop_front() {
	if (num_items == 0) { return; } //if there's no item, simply end

	if (num_items == 1) { //if there's only one item, delete it, reset the bag
		delete first;
		last = nullptr;
		first = nullptr;
	}
	else {
		first = first->next;
		delete first->previous;
		first->previous = nullptr;
	}
	num_items--;
	return;
}


template<class X> X & bag<X>::operator[](int i) {
	item<X> *n1 = first;
	for (size_t j = 0; j < i; j++) {
		n1 = n1->next;
	}
	return n1->value;
}

template<class X> X bag<X>::front() {
	return first->value;
}

template<class X> X bag<X>::back() {
	return last->value;
}

template<class X> void bag<X>::clear() {
	item<X> *n1 = first;
	for (int i = 0; i < num_items; i++) {
		first = first->next;
		delete n1;
		n1 = first;
	}
	last = nullptr;
	num_items = 0;
	return;
}

template<class X> ostream & operator<<(ostream & stream, bag<X>& t) {
	item<X> *n1 = t.first;
	for (int i = 0; i < t.num_items; i++) {
		stream << n1->value << " ";
		n1 = n1->next;
	}
	return stream;
}



int main() {
	bag<double> bag_d;
	bag_d.push_back(5.5);
	bag_d.push_back(6.6);
	bag_d.push_front(4.4);
	bag_d.push_front(3.3);
	bag_d.pop_front();
	bag_d.pop_back();
	cout << bag_d << endl;;


	bag<int> bag_i;
	bag_i.push_back(5);
	bag_i.push_back(6);
	bag_i.push_front(4);
	bag_i.push_front(3);
	bag_i.pop_front();
	bag_i.pop_back();
	cout << bag_i << endl;

	ThreeD<int> td3(3), td4(4), td5(5), td6(6), td7(100, 200, 300);
	bag<ThreeD<int>> bag_3D;
	bag_3D.push_back(td5);
	bag_3D.push_back(td6);
	bag_3D.push_front(td4);
	bag_3D.push_front(td3);
	bag_3D.pop_front();
	bag_3D.pop_back();
	cout << bag_3D << endl;;
	cout << bag_3D.front() << bag_3D.back();
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D[1] = td7;
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D.clear();
	cout << bag_3D << endl;;
	cout << bag_3D.size() << endl;


	linked_list<string>ls_1;
	ls_1.push_front("David");
	ls_1.push_front("John");
	ls_1.push_front("Pat");
	ls_1.push_front("Ben");
	ls_1.push_front("Jeff");
	cout << ls_1 << endl;

	linked_list<string>ls_2;
	ls_2.push_front("Wendy");
	ls_2.push_front("Mary");
	ls_2.push_front("Nancy");
	ls_2.push_front("Jennifer");
	cout << ls_2 << endl;

	bag<linked_list<string>> bag_string;

	bag_string.push_back(ls_1);

	bag_string.push_back(ls_2);

	cout << bag_string << endl;
	cout << bag_string[1] << endl;

	ThreeD<double> t10(3.2, 7.4, 8.9), t11(5.6, 7.7, 2.987), t12(4.6, 7.5, 3.1416), t13(55.6, 66.8, 333.45);
	linked_list< ThreeD<double> > LTD1;
	LTD1.push_front(t10);

	LTD1.push_front(t11);
	linked_list< ThreeD<double> > LTD2;
	LTD2.push_front(t13);
	LTD2.push_front(t12);
	LTD2.push_front(t10);
	LTD2.push_front(t11);

	bag<linked_list< ThreeD<double> > > BLTD;
	BLTD.push_back(LTD1);
	BLTD.push_back(LTD2);
	cout << BLTD << endl;

	getchar();
	getchar();
	return 0;

}