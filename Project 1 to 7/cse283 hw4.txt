//HW4
//Due: 11:59PM, March 29 (Thursday)

//Xiongfeng Zhu

#include <iostream>
#include <list>
#include <map>
#include <string>
using namespace std;

class course {
public:
	string name;
	int section;
	int credits;
	course() {}
	course(string n, int s, int c) { name = n; section = s; credits = c; }
	bool operator<(course &c) { return (name < c.name); }
	bool operator==(course &c) { return (name == c.name); }
};
// You need to implement the following funcitos:

void add_student(map<int, list<course *> * >  &DB, int id);  //add a student
void remove_student(map<int, list<course *> * > &DB, int id); //remove a student
void add_course(map<int, list<course *> * > &DB, int id, course c); //add a course for a student
void drop_course(map<int, list<course *> * >  &DB, int id, course c); //drop a course for a student
void print_student_courses(map<int, list<course *> * > &DB, int id); //print all courses of a student
void print_DB(map<int, list<course *> * >  &DB); //print all courses of all students

int main() {
	map<int, list<course  *> *>  DB;
	add_student(DB, 11111);
	course C1("CIS554", 1, 3), C2("CSE674", 1, 3), C3("MAT296", 8, 4), C4("WRT205", 5, 3);

	add_course(DB, 11111, C1);
	add_course(DB, 11111, C4);
	add_course(DB, 11111, C3);
	add_course(DB, 11111, C2);
	print_student_courses(DB, 11111);
	drop_course(DB, 11111, C1);
	print_student_courses(DB, 11111);

	add_student(DB, 11112);
	add_course(DB, 11112, C2);
	add_course(DB, 11112, C4);
	add_course(DB, 11112, C3);
	add_course(DB, 11112, C1);
	print_student_courses(DB, 11112);

	print_DB(DB);
	remove_student(DB, 11111);
	print_DB(DB);

	getchar();
	getchar();
	return 0;
}

void add_student(map<int, list<course *> * >  &DB, int id) {
	if (DB.find(id) != DB.end())
		return;
	DB[id] = new list<course*>;
}
void remove_student(map<int, list<course *> * >  &DB, int id) {
	auto it1 = DB.find(id);
	if (it1 == DB.end()) return;
	auto it2 = ((*it1).second->begin());
	while (it2 != ((*it1).second->end())) {
		delete *it2;
		it2 = (*it1).second->erase(it2);
	}
	DB.erase(it1);
}


void add_course(map<int, list<course *> * >  &DB, int id, course c) {
	auto it1 = DB.find(id);
	if (it1 == DB.end()) return;
	(*it1).second->push_back(new course(c));

}

void drop_course(map<int, list<course *> * > &DB, int id, course c) {
	auto it1 = DB.find(id);
	if (it1 == DB.end()) return;
	auto it2 = ((*it1).second->begin());
	while (it2 != ((*it1).second->end())) {
		if ((*it2)->name == c.name) {
			delete *it2;
			it2= (*it1).second->erase(it2);
		}
		it2++;
	}
}


void print_student_courses(map<int, list<course *> * > &DB, int id) {
	auto it1 = DB.find(id);	
	if (it1 == DB.end()) return;
	cout << id <<"\n";
	auto it2 = ((*it1).second->begin());
	while (it2 != ((*it1).second->end())) {
		cout << "   " <<(*it2)->name<<" " << (*it2)->section << "  " <<(*it2)->credits <<"  ";
		it2++;
	}
	cout << endl;
}

void print_DB(map<int, list<course *> * >   &DB) {
	auto it1 = DB.begin();
	if (it1 == DB.end()) return;
	while (it1 != DB.end()) {
		cout << endl << it1->first << " ";
		auto it2 = ((*it1).second->begin());
		while (it2 != ((*it1).second->end())) {
			cout << (*it2)->name << " " << (*it2)->section << "  " << (*it2)->credits << "  ";
			it2++;
		}
		it1++;
		cout << "\n";
	}
	cout << " \n" << endl;
}

/*
The following is a screenshot for the included main function:

11111
CIS554 1 3  WRT205 5 3  MAT296 8 4  CSE674 1 3
11111
WRT205 5 3  MAT296 8 4  CSE674 1 3
11112
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3
11111
WRT205 5 3  MAT296 8 4  CSE674 1 3
11112
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

11112
CSE674 1 3  WRT205 5 3  MAT296 8 4  CIS554 1 3

*/